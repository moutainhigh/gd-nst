package cn.gdeng.nst.server.order.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.dubbo.config.annotation.Service;
import com.alibaba.fastjson.JSON;
import com.aliyun.openservices.ons.api.Message;
import com.aliyun.openservices.ons.api.bean.ProducerBean;

import cn.gdeng.nst.api.dto.order.OrderInfoDTO;
import cn.gdeng.nst.api.dto.task.PushMsgDto;
import cn.gdeng.nst.api.server.order.OrderInfoTransService;
import cn.gdeng.nst.dao.BaseDao;
import cn.gdeng.nst.entity.nst.MqError;
import cn.gdeng.nst.entity.nst.OrderInfoEntity;
import cn.gdeng.nst.entity.nst.OrderInfoTransEntity;
import cn.gdeng.nst.entity.nst.SourceShipperEntity;
import cn.gdeng.nst.enums.MqConstants;
import cn.gdeng.nst.enums.MsgCons;
import cn.gdeng.nst.enums.OrderInfoTransStatusEnum;
import cn.gdeng.nst.enums.PushConstants;
import cn.gdeng.nst.util.web.api.ApiResult;
import cn.gdeng.nst.util.web.api.BizException;
import cn.gdeng.nst.util.web.api.GSONUtils;
import cn.gdeng.nst.util.web.api.SerializeUtil;

/**
 *  运单-物流信息接口实现类
 * @author wjguo
 *
 * datetime:2016年12月5日 上午11:56:39
 */
@Service
public class OrderInfoTransServiceImpl implements OrderInfoTransService {
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Resource
	private BaseDao<?> baseDao;
	@Resource
	private ProducerBean msgPushProducer;
	

	@Override
	public ApiResult<Map<String, Object>> saveForPrePaymentSucc(String orderNo) throws BizException {
		OrderInfoDTO orderInfoDTO = getOrderInfoByOrderNo(orderNo);
		
		//===1.更新orderInfo订单信息表的物流状态===   ps:因为已经成功支付完预付款，则物流状态为下一步：待验货。
		updateOrderInfoTransStatus(orderInfoDTO.getId(), OrderInfoTransStatusEnum.WAIT_EXAMINED_GOODS.getCode());
		//===2.新增订单-物流信息表的记录。===
		Long transId = constractTransAndSave(orderInfoDTO, OrderInfoTransStatusEnum.WAIT_EXAMINED_GOODS.getCode());
		//===3.给物流公司推送消息===
		pushMsgToLogisticsForPrePaymentSucc(orderInfoDTO);
		//===4.给车主推送消息===
		pushMsgToDriverForPrePaymentSucc(orderInfoDTO);
		
		//===5.组装返回结果===
		Map<String, Object> resultMap = new HashMap<String, Object>(1);
		resultMap.put("id", transId);
		ApiResult<Map<String, Object>> apiResult = new ApiResult<Map<String,Object>>();
		apiResult.setResult(resultMap);
		return apiResult;
	}
	
	
	/** 根据订单编号获取订单信息
	 * @param orderNo
	 * @return
	 * @throws BizException 如果没有对应的订单信息，则抛出此异常。
	 */
	private OrderInfoDTO getOrderInfoByOrderNo(String orderNo) throws BizException {
		Map<String, Object> paramMap = new HashMap<String, Object>(1);
		paramMap.put("orderNo", orderNo);
		OrderInfoDTO orderInfoDTO = baseDao.queryForObject("OrderInfo.getByOrderNo", paramMap, OrderInfoDTO.class);
		if (orderInfoDTO == null) {
			throw new BizException(MsgCons.C_23034, MsgCons.M_23034);
		}
		return orderInfoDTO;
	}
	
	
	/** 更新订单信息的物流状态
	 * @param id
	 * @param TransStatus
	 */
	private void updateOrderInfoTransStatus(Integer id, Byte TransStatus) {
		OrderInfoEntity orderInfoEntity  = new OrderInfoEntity();
		orderInfoEntity.setTransStatus(TransStatus);
		orderInfoEntity.setId(id);
		orderInfoEntity.setUpdateTime(new Date());
		baseDao.dynamicMerge(orderInfoEntity);
	}
	
	/** 构造订单物流信息并保存
	 * @param OrderInfoDTO 订单信息DTO
	 * @return  保存的物流信息id
	 */
	private Long constractTransAndSave(OrderInfoDTO orderInfoDTO, Byte transStatus) {
		OrderInfoTransEntity transEntity = constractTransBaseData(orderInfoDTO);
		transEntity.setTransStatus(transStatus);
		return  baseDao.persist(transEntity, Long.class);
	}
	
	/** 构造订单-物流信息的基本数据
	 * @param orderInfoDTO
	 * @return
	 */
	private OrderInfoTransEntity constractTransBaseData(OrderInfoDTO orderInfoDTO) {
		OrderInfoTransEntity transEntity = new OrderInfoTransEntity();
		transEntity.setOrderInfoId(orderInfoDTO.getId());
		transEntity.setOrderNo(orderInfoDTO.getOrderNo());
		transEntity.setSourceId(orderInfoDTO.getSourceId());
		transEntity.setIsDeleted((byte)0);
		transEntity.setCreateTime(new Date());
		transEntity.setUpdateTime(new Date());
		return transEntity;
	}
	
	
	/** 预付款支付成功后，推送消息给物流公司。
	 * @param OrderInfoDTO 订单信息DTO
	 * @throws BizException  
	 * 
	 */
	private void pushMsgToLogisticsForPrePaymentSucc(OrderInfoDTO orderInfoDTO) throws BizException {
		SourceShipperEntity shipperEntity = getSourceShipperById(orderInfoDTO.getSourceId());
		PushMsgDto dto=new PushMsgDto();
		dto.setBizId(orderInfoDTO.getId());
		dto.setContent(MsgCons.M_28012);
		dto.setMemberId(shipperEntity.getAssignMemberId());
		dto.setMsgType(PushConstants.MSG_TYPE_5);
		msgPush(dto);
	}
	
	/** 根据id获取货源信息。
	 * @param sourceId
	 * @return
	 * @throws BizException 如果没有对应的订单信息，则抛出此异常。
	 */
	private SourceShipperEntity getSourceShipperById(Integer sourceId) throws BizException {
		SourceShipperEntity shipperParam = new SourceShipperEntity();
		shipperParam.setId(sourceId);
		SourceShipperEntity shipperResult = baseDao.find(SourceShipperEntity.class, shipperParam);
		if (shipperResult == null) {
			throw new BizException(MsgCons.C_24033, MsgCons.M_24033);
		}
		
		return shipperParam;
	}
	
	/** 预付款支付成功后，推送消息给物流公司。
	 * @param OrderInfoDTO 订单信息DTO
	 * 
	 */
	private void pushMsgToDriverForPrePaymentSucc(OrderInfoDTO orderInfoDTO) {
		PushMsgDto dto = new PushMsgDto();
		dto.setBizId(orderInfoDTO.getId());
		dto.setContent(MsgCons.M_28013);
		dto.setMemberId(orderInfoDTO.getDriverMemberId());
		dto.setMsgType(PushConstants.MSG_TYPE_6);
		msgPush(dto);
	}
	
	private void msgPush(PushMsgDto dto) {
		Message msg = new Message(msgPushProducer.getProperties().getProperty(MqConstants.TOPIC),MqConstants.TAG,SerializeUtil.serialize(dto));
		msg.setKey(dto.getMemberId().toString());
		try {
			logger.info("MQ消息推送成功, 推送的数据为:{}", JSON.toJSONString(dto));
			msgPushProducer.send(msg);
		} catch (Exception e) {
			logger.error("MQ消息推送失败", e);
			//异常数据存入表 mq_error
			this.insertMqError(dto, dto.getBizId(), MqConstants.TOPIC_PUSH);
		}
	}
	
	
	/**
	 * 异常数据存入表 mq_error
	 * @param dto
	 */
	private void insertMqError(Object dto,Integer memberId,Integer topic){
		MqError mqError = new MqError();
		mqError.setBizType(MqConstants.BIZ_TYPE_1);
		mqError.setTopic(topic);
		mqError.setMemberId(memberId);
		mqError.setContent(GSONUtils.toJson(dto,false));
		mqError.setCreateUserId(1);
		baseDao.execute("MqError.insert", mqError);
	}



	@Override
	public ApiResult<Map<String, Object>> repealPrePaymentSucc(String orderNo) throws BizException {
		OrderInfoDTO orderInfoDTO = getOrderInfoByOrderNo(orderNo);
		//===1.更新orderInfo订单信息表的物流状态=== 
		updateOrderInfoTransStatus(orderInfoDTO.getId(), OrderInfoTransStatusEnum.PAID_FINAL.getCode());
		//===2.新增订单-物流信息表的记录。===
		Long transId = constractTransAndSave(orderInfoDTO, OrderInfoTransStatusEnum.PAID_FINAL.getCode());
		
		
		return null;
	}



	@Override
	public ApiResult<Map<String, Object>> saveForFinalPaymentSucc(String orderNo) throws BizException {
		OrderInfoDTO orderInfoDTO = getOrderInfoByOrderNo(orderNo);
		
		//===1.更新orderInfo订单信息表的物流状态=== 
		updateOrderInfoTransStatus(orderInfoDTO.getId(), OrderInfoTransStatusEnum.PAID_FINAL.getCode());
		//===2.新增订单-物流信息表的记录。===
		Long transId = constractTransAndSave(orderInfoDTO, OrderInfoTransStatusEnum.PAID_FINAL.getCode());
		//===3.给物流公司推送消息===
		pushMsgToLogisticsForFinalPaymentSucc(orderInfoDTO);
		
		//===5.组装返回结果===
		Map<String, Object> resultMap = new HashMap<String, Object>(1);
		resultMap.put("id", transId);
		ApiResult<Map<String, Object>> apiResult = new ApiResult<Map<String,Object>>();
		apiResult.setResult(resultMap);
		return apiResult;
	}
	
	/** 尾款支付成功后，推送消息给物流公司。
	 * @param OrderInfoDTO 订单信息DTO
	 * @throws BizException 
	 * 
	 */
	private void pushMsgToLogisticsForFinalPaymentSucc(OrderInfoDTO orderInfoDTO) throws BizException {
		SourceShipperEntity shipperEntity = getSourceShipperById(orderInfoDTO.getSourceId());
		PushMsgDto dto=new PushMsgDto();
		dto.setBizId(orderInfoDTO.getId());
		dto.setContent(MsgCons.M_28014);
		dto.setMemberId(shipperEntity.getAssignMemberId());
		dto.setMsgType(PushConstants.MSG_TYPE_7);
		msgPush(dto);
	}

}
