package cn.gdeng.nst.admin.controller.admin;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.gdeng.nst.admin.controller.right.AdminBaseController;
import cn.gdeng.nst.admin.dto.admin.AdminOrderBeforeDTO;
import cn.gdeng.nst.admin.dto.admin.AdminOrderDTO;
import cn.gdeng.nst.admin.dto.admin.AdminPageDTO;
import cn.gdeng.nst.admin.dto.admin.AdminSourceAssignHisDTO;
import cn.gdeng.nst.admin.dto.admin.AdminSourceShipperDTO;
import cn.gdeng.nst.admin.service.admin.OrderAgentService;
import cn.gdeng.nst.admin.service.admin.OrderBeforeService;
import cn.gdeng.nst.admin.service.admin.OrderInfoService;
import cn.gdeng.nst.admin.service.admin.SourceAssignHisService;
import cn.gdeng.nst.admin.service.admin.SourceShipperService;
import cn.gdeng.nst.entity.nst.SysRegisterUser;
import cn.gdeng.nst.enums.MsgCons;
import cn.gdeng.nst.util.admin.web.CommonUtil;
import cn.gdeng.nst.util.admin.web.DateUtil;
import cn.gdeng.nst.util.web.api.ApiResult;

import com.alibaba.dubbo.config.annotation.Reference;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;

/**
 * 货源管理
 * @author dengjianfeng
 *
 */
@Controller
@RequestMapping("sourceShipper")
public class SourceShipperController extends AdminBaseController{

	@Reference
	private SourceShipperService sourceShipperService;
	
	@Reference
	private SourceAssignHisService sourceAssignService;
	
	@Reference
	private OrderBeforeService orderBeforeService;
	
	@Reference
	private OrderInfoService orderInfoService;
	
	@Reference
	private OrderAgentService orderAgentService;

	@RequestMapping("index")
	public String index(){
		return "sourceShipper/list";
	}
	
	@RequestMapping("queryPage")
	@ResponseBody
	public String queryPage(HttpServletRequest request){
		Map<String, Object> paramMap = getParametersMap(request);
		setCommParameters(request, paramMap);
		String startDate = request.getParameter("startDate");
		String endDate = request.getParameter("endDate");
		if(StringUtils.isNotBlank(startDate)){
			String startTime = CommonUtil.getStartOfDay(DateUtil.formateDate(startDate));
			paramMap.put("startTime", startTime);
		}
		if(StringUtils.isNotBlank(endDate)){
			String endTime = CommonUtil.getEndOfDay(DateUtil.formateDate(endDate));
			paramMap.put("endTime", endTime);
		}
		
		ApiResult<AdminPageDTO> apiResult = sourceShipperService.queryPage(paramMap);
		if(apiResult != null){
			return JSONObject.toJSONString(apiResult.getResult(), SerializerFeature.WriteDateUseDateFormat);
		}
		return null;
	}
	
	@RequestMapping("edit/{id}")
	public String edit(@PathVariable("id") Integer id){
		ApiResult<AdminSourceShipperDTO> apiResult = sourceShipperService.getById(id);
		if(apiResult != null){
			putModel("sourceShipperDTO", apiResult.getResult());
		}
		putModel("sourceId", id);
		return "sourceShipper/detail";
	}
	
	@RequestMapping("saveEdit")
	@ResponseBody
	public String saveEdit(AdminSourceShipperDTO sourceShipperDTO, HttpServletRequest request){
		//是否登录验证
		String validateLogin = validateLogin(request);
		if(validateLogin != null){
			return validateLogin;
		}
		
		sourceShipperDTO.setUpdateUserId(getUser(request).getUserID());
		ApiResult<Integer> apiResult = sourceShipperService.update(sourceShipperDTO);
		if(apiResult == null){
			apiResult = new ApiResult<Integer>(0, MsgCons.C_50000, MsgCons.M_50000);
		}
		return JSONObject.toJSONString(apiResult);
	}

	@RequestMapping("detail/{sourceId}")
	public String detail(@PathVariable("sourceId") Integer sourceId){
		ApiResult<AdminSourceShipperDTO> apiResult = sourceShipperService.getById(sourceId);
		if(apiResult != null){
			putModel("sourceShipperDTO", apiResult.getResult());
		}
		putModel("sourceId", sourceId);
		return "sourceShipper/detail";
	}
	
	/**
	 * 删除（批量删除）
	 * @param request
	 * @return
	 */
	@RequestMapping(value="delete",produces="application/json;charset=utf-8")
	@ResponseBody
	public String delete(HttpServletRequest request){
		String validateResult = validateLogin(request);
		if(validateResult != null){
			return validateResult;
		}
		
		String idsStr = request.getParameter("ids");
		String[] ids = idsStr.split(",");
		ApiResult<int[]> apiResult = sourceShipperService.batchDelete(ids, getUser(request).getUserID());
		return JSONObject.toJSONString(apiResult);
	}
	
	/**
	 * 货源分配记录
	 * @param sourceId
	 * @return
	 */
	@RequestMapping("assignHistoryList/{sourceId}")
	@ResponseBody
	public String assignHistoryList(@PathVariable("sourceId") Integer sourceId){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("sourceId", sourceId);
		ApiResult<List<AdminSourceAssignHisDTO>> apiResult = sourceAssignService.queryList(paramMap);
	
		Map<String, Object> resultMap = new HashMap<String, Object>();
		if(apiResult != null){
			resultMap.put("rows", apiResult.getResult());
		}else{
			resultMap.put("rows", Collections.EMPTY_LIST);
		}
		return JSONObject.toJSONString(resultMap, SerializerFeature.WriteDateUseDateFormat);
	}
	
	/**
	 * 货源接单记录
	 * @param sourceId
	 * @return
	 */
	@RequestMapping("orderBeforeList/{sourceId}")
	@ResponseBody
	public String orderBeforeList(@PathVariable("sourceId") Integer sourceId){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("sourceId", sourceId);
		ApiResult<List<AdminOrderBeforeDTO>> apiResult = orderBeforeService.queryList(paramMap);
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		if(apiResult != null){
			resultMap.put("rows", apiResult.getResult());
		}else{
			resultMap.put("rows", Collections.EMPTY_LIST);
		}
		return JSONObject.toJSONString(resultMap, SerializerFeature.WriteDateUseDateFormat);
	}
	
	/**
	 * 订单信息
	 * @param sourceId
	 * @return
	 */
	@RequestMapping("orderList/{sourceId}")
	@ResponseBody
	public String orderList(@PathVariable("sourceId") Integer sourceId){
		List<AdminOrderDTO> list = new ArrayList<AdminOrderDTO>(2);
		//货运订单
		ApiResult<List<AdminOrderDTO>> orderInfoApiResult = orderInfoService.getAdminOrderDTOBySourceId(sourceId);
		if(orderInfoApiResult != null && orderInfoApiResult.getResult() != null){
			list.addAll(orderInfoApiResult.getResult());
		}
		//信息订单
		ApiResult<List<AdminOrderDTO>> orderAgentApiResult = orderAgentService.getAdminOrderDTOBySourceId(sourceId);
		if(orderAgentApiResult != null && orderAgentApiResult.getResult() != null){
			list.addAll(orderAgentApiResult.getResult());
		}
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("rows", list);
		return JSONObject.toJSONString(resultMap, SerializerFeature.WriteDateUseDateFormat);
		
	}
	
	/**
	 * 验证登录信息是否存在
	 * @param request
	 * @return
	 */
	private String validateLogin(HttpServletRequest request){
		SysRegisterUser registerUser = getUser(request);
		if(registerUser == null){
			ApiResult<String> apiResult = new ApiResult<String>("登录超时,请重新登录", MsgCons.C_30000,  MsgCons.M_30000);
			return JSONObject.toJSONString(apiResult); 
		}
		return null;
	}
	
	/**
	 * 导出前检查
	 * @param request
	 * @return
	 */
	@RequestMapping(value="exportCheck",produces="application/json;charset=utf-8")
	@ResponseBody
	public String exportCheck(HttpServletRequest request){
		//查询参数
		Map<String, Object> paramMap = getParametersMap(request);
		String startDate = request.getParameter("startDate");
		String endDate = request.getParameter("endDate");
		if(StringUtils.isNotBlank(startDate)){
			String startTime = CommonUtil.getStartOfDay(DateUtil.formateDate(startDate));
			paramMap.put("startTime", startTime);
		}
		if(StringUtils.isNotBlank(endDate)){
			String endTime = CommonUtil.getEndOfDay(DateUtil.formateDate(endDate));
			paramMap.put("endTime", endTime);
		}
		ApiResult<Integer> apiResult = sourceShipperService.countTotal(paramMap);
		if(apiResult != null && apiResult.getResult() != null){
			int total = apiResult.getResult();
			if(total <= 0){
				return JSONObject.toJSONString(new ApiResult<String>().withError(MsgCons.C_29005, MsgCons.M_29005));
			}
			else if(total > EXPORT_MAX_SIZE){
				return JSONObject.toJSONString(new ApiResult<String>().withError(MsgCons.C_29006, MsgCons.M_29006));
			}
		}
		return JSONObject.toJSONString(new ApiResult<String>());
	}
	
	@RequestMapping("export")
	public void export(HttpServletRequest request, HttpServletResponse response){
		//查询参数
		Map<String, Object> paramMap = getParametersMap(request);
		String startDate = request.getParameter("startDate");
		String endDate = request.getParameter("endDate");
		if(StringUtils.isNotBlank(startDate)){
			String startTime = CommonUtil.getStartOfDay(DateUtil.formateDate(startDate));
			paramMap.put("startTime", startTime);
		}
		if(StringUtils.isNotBlank(endDate)){
			String endTime = CommonUtil.getEndOfDay(DateUtil.formateDate(endDate));
			paramMap.put("endTime", endTime);
		}
		paramMap.put(PAGE_SIZE, EXPORT_PAGE_SIZE);
		
		OutputStream ouputStream = null;
		try{
			String fileName = "货源列表"+DateUtil.toString(new Date(), "yyyy-MM-dd_HH:mm:ss");
			response.setContentType("application/vnd.ms-excel");
			response.setHeader("Content-disposition", "attachment;filename=" + new String(fileName.getBytes(), "ISO-8859-1") + ".xlsx");
			ouputStream = response.getOutputStream();
			
			SXSSFWorkbook workbook = new SXSSFWorkbook();
            String[] headers = {"货源ID", "发布人姓名", "发布人手机", "发布时间", "分配公司/车主名称", "分配公司/车主手机", "货源类型", "线路类型", "发货地", "目的地", "货物类型",
            		"货物重量", "发货方式", "意向运费", "发布来源", "货物状态", "司机接单次数"};
            
            int sheetNum = 1;
			Sheet sheet = createSheet(workbook, sheetNum, headers);
			
			// 查询导出数据总数
			ApiResult<Integer> countApiResult = sourceShipperService.countTotal(paramMap);
            int totalCount = 0;
            if(countApiResult != null){
            	totalCount = countApiResult.getResult();
            }
            // 计算分几次查询导出数据
            int exportCount = (totalCount / EXPORT_PAGE_SIZE) + 1;
            
            int rowNum = 1; //当前sheet写入行数
            for(int i = 0; i < exportCount; i++){
            	// 查询分页数据
            	paramMap.put(START_ROW, (i * EXPORT_PAGE_SIZE));
	            ApiResult<List<AdminSourceShipperDTO>> apiResult = sourceShipperService.queryListForExport(paramMap);
	    		List<AdminSourceShipperDTO> list = null;
	    		if(apiResult != null){
	    			list = apiResult.getResult();
	    		}
	   
	            if(CollectionUtils.isEmpty(list)){
	            	break;
	            }
	            for(int j = 0, len = list.size(); j < len; j++){
                   	// 数据已经达到单个sheet的最大行数，新建sheet
                   	if(rowNum % SHEET_MAX_ROW_NUM == 0){
                   		sheetNum++;
                   		sheet = createSheet(workbook, sheetNum, headers);
                   		rowNum = 1; //重置rowNum
                   	}
                   	
                   	AdminSourceShipperDTO dto = list.get(j);
                   	writeRowData(sheet, rowNum, dto);
                    rowNum++;
               	}
            }
            workbook.write(ouputStream);
		}catch(Exception e){
			e.printStackTrace();
		}finally {
            try {
                ouputStream.flush();
                ouputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
	}
	
	/**
	 * 创建一个sheet，并在第一行写入表头
	 * @param workbook
	 * @param sheetNum
	 * @param headers
	 * @return
	 */
	private Sheet createSheet(SXSSFWorkbook workbook, int sheetNum, String[] headers){
		String sheetName = "货源数据";
		if(sheetNum > 1){
			sheetName += sheetNum;
		}
		Sheet sheet = workbook.createSheet(sheetName);
		Row row = sheet.createRow(0);
        for(int i = 0, len = headers.length; i < len; i++){
        	row.createCell(i).setCellValue(headers[i]);
        }
        return sheet;
	}
	
	private void writeRowData(Sheet sheet, int rowNum, AdminSourceShipperDTO dto){
		Row row = sheet.createRow(rowNum);
		
		Double freight = dto.getFreight();
		String freightStr = "";
		if(freight == null || freight == 0){
			freightStr = "面议";
		}else{
			freightStr = String.valueOf(freight);
		}
		
		String sourceStatus = null;
      	if("1".equals(dto.getIsDeleted())){
      		sourceStatus = "已删除";
      	}else{
      		sourceStatus = dto.getSourceStatusStr();
      	}
      	
      	String sDetail = dto.getSDetailStr();
      	if(dto.getSDetailedAddress() != null){
      		sDetail += dto.getSDetailedAddress();
      	}
      	
      	String eDetail = dto.getEDetailStr();
      	if(dto.getEDetailedAddress() != null){
      		eDetail += dto.getEDetailedAddress();
      	}
      	
      	String totalWeight = null;
      	if(dto.getTotalWeight() != null){
      		totalWeight = dto.getTotalWeight()+"吨";
      	}else{
      		totalWeight = "";
      	}
        
      	row.createCell(0).setCellValue(dto.getId());
        row.createCell(1).setCellValue(dto.getMemberName());
      	row.createCell(2).setCellValue(dto.getMemberMobile());
      	row.createCell(3).setCellValue(dto.getCreateTimeStr());
    	row.createCell(4).setCellValue(dto.getLogisticName());
      	row.createCell(5).setCellValue(dto.getLogisticMobile());
      	row.createCell(6).setCellValue(dto.getNstRuleStr());
      	row.createCell(7).setCellValue(dto.getSourceTypeStr());
      	row.createCell(8).setCellValue(sDetail);
      	row.createCell(9).setCellValue(eDetail);
      	row.createCell(10).setCellValue(dto.getGoodsTypeStr());
      	row.createCell(11).setCellValue(totalWeight);
      	row.createCell(12).setCellValue(dto.getSendGoodsTypeStr());
      	row.createCell(13).setCellValue(freightStr);
      	row.createCell(14).setCellValue(dto.getClientsStr());
      	row.createCell(15).setCellValue(sourceStatus);
      	row.createCell(16).setCellValue( dto.getOrderBeforeCount().toString());
	}
}
