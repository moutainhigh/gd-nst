package cn.gdeng.nst.server.source.impl;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.dubbo.config.annotation.Service;
import com.gudeng.framework.dba.transaction.annotation.Transactional;

import cn.gdeng.nst.api.dto.source.SourceAssignHisDetailDTO;
import cn.gdeng.nst.api.dto.source.SourceAssignHisListDTO;
import cn.gdeng.nst.api.server.source.GoodsAssignmentService;
import cn.gdeng.nst.dao.BaseDao;
import cn.gdeng.nst.entity.nst.SourceLogEntity;
import cn.gdeng.nst.entity.nst.SourceShipperEntity;
import cn.gdeng.nst.enums.MsgCons;
import cn.gdeng.nst.enums.OperateEnum;
import cn.gdeng.nst.server.source.mq.GoodsProvidereMQServie;
import cn.gdeng.nst.util.AddrUtils;
import cn.gdeng.nst.util.ReflectionUtils;
import cn.gdeng.nst.util.web.api.ApiPage;
import cn.gdeng.nst.util.web.api.ApiResult;
import cn.gdeng.nst.util.web.api.BizException;

@Service
public class GoodsAssignmentServiceImpl implements GoodsAssignmentService {
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	@Resource
	private BaseDao<?> baseDao;
	@Resource
	private GoodsProvidereMQServie goodsProvidereMQServie;
	
	@SuppressWarnings("unchecked")
	@Override
	public ApiResult<ApiPage> queryMyAssginmentGoodsByPage(ApiPage page) throws BizException {
		ApiResult<ApiPage> apiResult = new ApiResult<ApiPage>();
		//获取结果集总数
		long total=baseDao.queryForObject("SourceAssignHis.countMyAssginmentGoods", page.getParaMap(), Long.class);
		//获取结果集
		List<SourceAssignHisListDTO> list;
		if (total > 0) {
			list= baseDao.queryForList("SourceAssignHis.queryMyAssginmentGoodsByPage", page.getParaMap(), SourceAssignHisListDTO.class);
			
			try {
				//生成详细的全地址
				generalFullAddrAndSet(list);
			} catch (Exception e) {
				logger.error("", e);
				throw new BizException(MsgCons.C_20000, MsgCons.M_20000);
			}
			
		} else {
			list = Collections.EMPTY_LIST;
		}
		//将结果封装到分页对象中
		page.setRecordList(list).setRecordCount(total);
		logger.debug("queryMyAssginmentGoodsByPage查询成功！");
		return apiResult.setResult(page);
	}
	
	/**生成详细的全地址，并set到list的元素中。<br/>
	 * NOTE:如果地址包含省份，去除该省份。
	 * @param list
	 * @throws Exception 
	 */
	private void generalFullAddrAndSet(List<SourceAssignHisListDTO> list) throws Exception {
		for (SourceAssignHisListDTO srcAssHis : list) {
			generalFullAddrAndSet(srcAssHis);
		}
	}
	
	/**生成详细的全地址，并set到参数的元素中。<br/>
	 * NOTE:如果地址包含省份，去除该省份。
	 * @param list
	 * @throws SecurityException 
	 * @throws NoSuchFieldException 
	 */
	private void generalFullAddrAndSet(Object obj) throws Exception {
		if (obj == null) {
			return ;
		}
		//=====设置起始地=====
		String srcFullAddr = "";
		String sDetailVal = (String) ReflectionUtils.invokeMethod(obj, "getSourceSDetail");
		if (StringUtils.isNotBlank(sDetailVal)) {
			srcFullAddr = AddrUtils.ridProvinceAndSpliceAddr(sDetailVal, "/");
			
		}
		String sDetailAddrVal = (String) ReflectionUtils.invokeMethod(obj, "getSourceSDetailAddr");
		if(StringUtils.isNotBlank(sDetailAddrVal)) {
			srcFullAddr += sDetailAddrVal;
		}
		//set到对象属性中
		ReflectionUtils.invokeMethod(obj, "setSrcFullAddr", srcFullAddr);

		//=====设置目的地====
		String  desFullAddr = "";
		String eDetailVal = (String) ReflectionUtils.invokeMethod(obj, "getSourceEDetail");
		if (StringUtils.isNotBlank(eDetailVal)) {
			desFullAddr = AddrUtils.ridProvinceAndSpliceAddr(eDetailVal, "/");
		}
		String eDetailAddrVal = (String) ReflectionUtils.invokeMethod(obj, "getSourceEDetailAddr");
		if(StringUtils.isNotBlank(eDetailAddrVal)) {
			desFullAddr += eDetailAddrVal;
		}
		//set到对象属性中
		ReflectionUtils.invokeMethod(obj, "setDesFullAddr", desFullAddr);
	}

	@Override
	@Transactional
	public ApiResult<Map<String, Object>> acceptAssigned(Map<String, Object> paramMap) throws BizException {
		//设置货源为代发规则。
		paramMap.put("nstRule", 2);
		//设置为接受分配
		paramMap.put("assignStatus", 2);
		
		//===根据id查询货源===
		Integer sourceShipperId = Integer.valueOf(paramMap.get("sourceShipperId").toString());
		SourceShipperEntity paramEntity = new SourceShipperEntity();
		paramEntity.setId(sourceShipperId);
		SourceShipperEntity resultEntity = baseDao.find(SourceShipperEntity.class, paramEntity);
		if (resultEntity == null) {
			throw new BizException(MsgCons.C_24010, MsgCons.M_24010);
		}
		
		//===更新货源和分配历史表状态===
		int ssRecord = baseDao.execute("SourceShipper.updateNstRuleById", paramMap);
		if (ssRecord == 0) {
			throw new BizException(MsgCons.C_24011, MsgCons.M_24011);
		}
		int sahRecord = baseDao.execute("SourceAssignHis.updateStatusById", paramMap);
		if (sahRecord == 0) {
			throw new BizException(MsgCons.C_24011, MsgCons.M_24011);
		}
		
		//===保存货源日志=====
		String updateUserId = paramMap.get("updateUserId").toString();
		saveLog(sourceShipperId, OperateEnum.GOODSASSIGNED.getName(), updateUserId);
		
		ApiResult<Map<String, Object>> apiResult = new ApiResult<Map<String, Object>>();
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("record", sahRecord);
		
		
		//===推送消息给货主===
		goodsProvidereMQServie.msgPushToShipperForGoodsAssignmentAccepted(sourceShipperId, resultEntity.getMemberId());
		
		logger.debug("acceptAssigned执行成功！");
		return apiResult.setResult(resultMap);
	}
	
	

	
	
	/**保存货源日志。
	 * @param sourceId
	 * @param desc
	 * @param createUserId
	 * @return
	 */
	private int saveLog(Integer sourceId, String desc, String createUserId) {
		SourceLogEntity entity = new SourceLogEntity();
		entity.setSourceId(sourceId);
		entity.setDescription(desc);
		entity.setCreateUserId(createUserId);
		Long id = baseDao.persist(entity, Long.class);
		logger.debug("保存货源日志成功，日志内容：" + desc);
		return id.intValue();
	}
	
	
	@Override
	@Transactional
	public ApiResult<Map<String, Object>> rejectAssigned(Map<String, Object> paramMap) throws BizException {
		//设置为拒绝分配
		paramMap.put("assignStatus", 3);
		int sahRecord = baseDao.execute("SourceAssignHis.updateStatusById", paramMap);
		if (sahRecord == 0) {
			throw new BizException(MsgCons.C_24012, MsgCons.M_24012);
		}
		
		//===保存货源日志=====
		/* 暂时不保存物流公司拒绝的日志。
		*Integer sourceShipperId = Integer.valueOf(paramMap.get("sourceShipperId").toString());
		*String updateUserId = paramMap.get("updateUserId").toString();
		*saveLog(sourceShipperId, OperateEnum.GOODSREJECTED.getName(), updateUserId);
		*/
		
		//=====推送至mq进行重新分配=====
		goodsProvidereMQServie.goodsAssignmentMQ(Integer.valueOf(paramMap.get("sourceShipperId").toString()));
		
		ApiResult<Map<String, Object>> apiResult = new ApiResult<Map<String, Object>>();
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("record", sahRecord);
		logger.debug("rejectAssigned执行成功！");
		return apiResult.setResult(resultMap);
	}
	

	@Override
	public ApiResult<SourceAssignHisDetailDTO> queryAssginmentGoodsDetail(Map<String, Object> paramMap)
			throws BizException {
		SourceAssignHisDetailDTO dto = baseDao.queryForObject("SourceAssignHis.queryAssginmentGoodsDetail", 
				paramMap, SourceAssignHisDetailDTO.class);
		
		//生成详细的全地址
		try {
			generalFullAddrAndSet(dto);
		} catch (Exception e) {
			logger.error("", e);
			throw new BizException(MsgCons.C_20000, MsgCons.M_20000);
		}
		logger.debug("queryAssginmentGoodsDetail执行成功！");
		ApiResult<SourceAssignHisDetailDTO> apiResult = new ApiResult<SourceAssignHisDetailDTO>();
		return apiResult.setResult(dto);
	}

}
