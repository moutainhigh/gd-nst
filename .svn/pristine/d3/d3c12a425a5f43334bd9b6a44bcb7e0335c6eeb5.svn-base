package cn.gdeng.nst.admin.controller.admin;

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import cn.gdeng.nst.admin.controller.right.AdminBaseController;
import cn.gdeng.nst.admin.dto.admin.AdminSourceShipperDTO;
import cn.gdeng.nst.admin.service.admin.SourceShipperService;
import cn.gdeng.nst.util.admin.web.CommonUtil;
import cn.gdeng.nst.util.admin.web.DateUtil;
import cn.gdeng.nst.util.web.api.ApiResult;

import com.alibaba.dubbo.config.annotation.Reference;

@RequestMapping("demo")
@Controller
public class DemoController extends AdminBaseController{
	@Reference
	private SourceShipperService sourceShipperService;

	@RequestMapping("export")
	public void export(HttpServletRequest request, HttpServletResponse response){
		//查询参数
		Map<String, Object> paramMap = getParametersMap(request);
		String startDate = request.getParameter("startDate");
		String endDate = request.getParameter("endDate");
		if(StringUtils.isNotBlank(startDate)){
			String startTime = CommonUtil.getStartOfDay(DateUtil.formateDate(startDate));
			paramMap.put("startTime", startTime);
		}
		if(StringUtils.isNotBlank(endDate)){
			String endTime = CommonUtil.getEndOfDay(DateUtil.formateDate(endDate));
			paramMap.put("endTime", endTime);
		}
		
		OutputStream ouputStream = null;
		try{
			String fileName = "货源导出数据";
			 // 设置输出响应头信息，
            response.setContentType("application/vnd.ms-excel");
            response.setHeader("Content-disposition", "attachment;filename=" + new String(fileName.getBytes(), "ISO-8859-1") + ".xls");
            ouputStream = response.getOutputStream();
            
            WritableWorkbook wwb = Workbook.createWorkbook(ouputStream);
            if(wwb == null){
            	return;
            }
            
            // 创建一个工作页，第一个参数的页名，第二个参数表示该工作页在excel中处于哪一页
            WritableSheet sheet = wwb.createSheet("货源数据1", 0);
            
            String[] headers = {"发布人姓名", "发布人手机", "发布时间", "货源类型", "线路类型", "发货地", "目的地", "货物类型",
            		"货物重量", "发货方式", "意向运费", "发布来源", "货物状态", "司机接单次数"};
            for(int i = 0, len = headers.length; i < len; i++){
            	 sheet.addCell(new Label(i, 0, headers[i]));
            }
            
            int row = 0;
            
           
            
            
            for(int j = 0; j < 5000; j++){
            
	            ApiResult<List<AdminSourceShipperDTO>> apiResult = sourceShipperService.queryListForExport(paramMap);
	    		
	    		List<AdminSourceShipperDTO> list = apiResult.getResult();
	   
	            
	            if(CollectionUtils.isNotEmpty(list)){
	            	int len = list.size();
	            	for(int i = 0; i < len; i++){
	                	AdminSourceShipperDTO dto = list.get(i);
	                	int cur = j * len + i + 1;
	                	
	                	if(cur % 60000 == 0){
	                		int count = cur / 60000;
	                		if(count > 0){
	                			row = 0;
	                			sheet = wwb.createSheet("货源数据"+(count+1), count);
	                		}
	                	}
	                	sheet.addCell(new Label(0, row, dto.getMemberName()));
	                    sheet.addCell(new Label(1, row, dto.getMemberMobile()));
	                    sheet.addCell(new Label(2, row, dto.getCreateTimeStr()));
	                    sheet.addCell(new Label(3, row, dto.getNstRuleStr()));
	                    sheet.addCell(new Label(4, row, dto.getSourceTypeStr()));
	                    sheet.addCell(new Label(5, row, dto.getSDetailStr()));
	                    sheet.addCell(new Label(6, row, dto.getEDetailStr()));
	                    sheet.addCell(new Label(7, row, dto.getGoodsTypeStr()));
	                    sheet.addCell(new Label(8, row, dto.getTotalWeight()+"吨"));
	                    sheet.addCell(new Label(9, row,	dto.getSendGoodsTypeStr()));
	                    Double freight = dto.getFreight();
	                    String freightStr = "";
	                    if(freight == null || freight == 0){
	                    	freightStr = "面议";
	                    }else{
	                    	freightStr = String.valueOf(freight);
	                    }
	                    sheet.addCell(new Label(10, row, freightStr));
	                    sheet.addCell(new Label(11, row, dto.getClientsStr()));
	                    sheet.addCell(new Label(12, row, dto.getSourceStatusStr()));
	                    sheet.addCell(new Label(13, row, dto.getOrderBeforeCount().toString()));
	                    row++;
	                }
	            }
            }
            wwb.write();
            wwb.close();
		}catch(Exception e){
			e.printStackTrace();
		}finally {
            try {
                ouputStream.flush();
                ouputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
	}
	
	@RequestMapping("export2")
	public void export2(HttpServletRequest request, HttpServletResponse response){
		//查询参数
		Map<String, Object> paramMap = getParametersMap(request);
		String startDate = request.getParameter("startDate");
		String endDate = request.getParameter("endDate");
		if(StringUtils.isNotBlank(startDate)){
			String startTime = CommonUtil.getStartOfDay(DateUtil.formateDate(startDate));
			paramMap.put("startTime", startTime);
		}
		if(StringUtils.isNotBlank(endDate)){
			String endTime = CommonUtil.getEndOfDay(DateUtil.formateDate(endDate));
			paramMap.put("endTime", endTime);
		}
		paramMap.put("pageSize", EXPORT_PAGE_SIZE);
		
		OutputStream ouputStream = null;
		try{
			String fileName = "货源导出数据";
			response.setContentType("application/vnd.ms-excel");
			response.setHeader("Content-disposition", "attachment;filename=" + new String(fileName.getBytes(), "ISO-8859-1") + ".xlsx");
			ouputStream = response.getOutputStream();
			
			SXSSFWorkbook workbook = new SXSSFWorkbook();
            String[] headers = {"发布人姓名", "发布人手机", "发布时间", "货源类型", "线路类型", "发货地", "目的地", "货物类型",
            		"货物重量", "发货方式", "意向运费", "发布来源", "货物状态", "司机接单次数"};
            
            int sheetNum = 1;
			Sheet sheet = createSheet(workbook, sheetNum, headers);
			
			// 查询导出数据总数
			ApiResult<Integer> countApiResult = sourceShipperService.countTotal(paramMap);
            int totalCount = 0;
            if(countApiResult != null){
            	totalCount = countApiResult.getResult();
            }
            // 计算分几次查询导出数据
            int exportCount = totalCount / EXPORT_PAGE_SIZE;
            
            int rowNum = 1; //当前sheet写入行数
            Integer id = null; //当前分页数据的最后一条数据id
            for(int i = 0; i < exportCount; i++){
            	// 查询分页数据
            	paramMap.put("id", id);
	            ApiResult<List<AdminSourceShipperDTO>> apiResult = sourceShipperService.queryListForExport(paramMap);
	    		List<AdminSourceShipperDTO> list = null;
	    		if(apiResult != null){
	    			list = apiResult.getResult();
	    		}
	   
	            if(CollectionUtils.isNotEmpty(list)){
	            	for(int j = 0, len = list.size(); j < len; j++){
	                   	// 数据已经达到单个sheet的最大行数，新建sheet
	                   	if(rowNum % SHEET_MAX_ROW_NUM == 0){
	                   		sheetNum++;
	                   		sheet = createSheet(workbook, sheetNum, headers);
	                   		rowNum = 1;
	                   	}
	                   	
	                   	AdminSourceShipperDTO dto = list.get(j);
	                   	writeRowData(sheet, rowNum, dto);
	                    rowNum++;
	                    
	                    // 记录最后一条数据id
	                    if(j == (len - 1)){
	                    	id = dto.getId();
	                    }
	               	}
	            }
            }
            workbook.write(ouputStream);
		}catch(Exception e){
			e.printStackTrace();
		}finally {
            try {
                ouputStream.flush();
                ouputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
	}
	
	/**
	 * 创建一个sheet，并在第一行写入表头
	 * @param workbook
	 * @param sheetNum
	 * @param headers
	 * @return
	 */
	private Sheet createSheet(SXSSFWorkbook workbook, int sheetNum, String[] headers){
		Sheet sheet = workbook.createSheet("货源数据"+sheetNum);
		Row row = sheet.createRow(0);
        for(int i = 0, len = headers.length; i < len; i++){
        	row.createCell(i).setCellValue(headers[i]);
        }
        return sheet;
	}
	
	private void writeRowData(Sheet sheet, int rowNum, AdminSourceShipperDTO dto){
		Row row = sheet.createRow(rowNum);
		
		Double freight = dto.getFreight();
		String freightStr = "";
		if(freight == null || freight == 0){
			freightStr = "面议";
		}else{
			freightStr = String.valueOf(freight);
		}
        
        row.createCell(0).setCellValue(dto.getMemberName());
      	row.createCell(1).setCellValue(dto.getMemberMobile());
      	row.createCell(2).setCellValue(dto.getCreateTimeStr());
      	row.createCell(3).setCellValue(dto.getNstRuleStr());
      	row.createCell(4).setCellValue(dto.getSourceTypeStr());
      	row.createCell(5).setCellValue(dto.getSDetailStr());
      	row.createCell(6).setCellValue(dto.getEDetailStr());
      	row.createCell(7).setCellValue(dto.getGoodsTypeStr());
      	row.createCell(8).setCellValue(dto.getTotalWeight()+"吨");
      	row.createCell(9).setCellValue(dto.getSendGoodsTypeStr());
      	row.createCell(10).setCellValue(freightStr);
      	row.createCell(11).setCellValue(dto.getClientsStr());
      	row.createCell(12).setCellValue(dto.getSourceStatusStr());
      	row.createCell(13).setCellValue( dto.getOrderBeforeCount().toString());
	}
}
