/** 操作提示*/
function slideMessage(msg){
	parent.$.messager.show({
		title:'操作提示',
		msg:msg,
		timeout:3000,
		showType:'slide'
	});
}	

/** 正常提示 */
function okMessage(msg){
	parent.$.messager.alert("操作提示",msg,"ok");
}
/** 错误（失败）操作提示 */
function errorMessage(msg){
	parent.$.messager.alert("操作提示",msg,"error");
}	

/** 警告操作提示 */
function warningMessage(msg){
	parent.$.messager.alert("操作提示",msg,"warning");
}	

/**
 * 获取树的所有选中节点，系统信息作为根节点,[且包含子节点非全选仍包含父节点]
 * @param objId
 * @returns {String}
 * @author songhui
 */
function getAllChecked(objId){
	var treeChecked=$("#"+objId).tree("getChecked");
	//父节点
	var parentNode=null;
	var parentId="";
	var parnetIdStr="";
	var childrenStr="";
	for(var i=0;i<treeChecked.length;i++){
		//只遍历第二级菜单
		if(treeChecked[i].menuLevel==2){
			//获取父节点
			parentNode=$("#"+objId).tree('getParent',treeChecked[i].target);
			if(parentNode!=null){
				if(parentId!=parentNode.id){
					parentId=parentNode.id;
					parnetIdStr+=parentNode.id+",";
				}
			}
			if(i+1<treeChecked.length){
				childrenStr+=treeChecked[i].id+",";
			}
			if(i+1==treeChecked.length){
				childrenStr+=treeChecked[i].id;
			}
		}
	}
	return parnetIdStr+childrenStr;
}

/**
 * 取列表id集合
 * @param objId
 * @return objStr id集合
 */
function getSelections(objId){
	var objStr = "";
	$("[name='" + objId + "']").each(function(){
	    if(this.checked){
	      var value = $(this).val();
	      if(objStr!=""){
	    	  objStr += ","+value;
	      }else{
	    	  objStr = value;
	      }
	    }
    });
	return  objStr;
}

//单行先择
function singleChose(id){

	var objStr = "";
	var count=0;
	$("[name='"+id+"']").each(function(){
	    if(this.checked){
	      var value = $(this).val();
	      if(objStr!=""){
	    	  objStr += ","+value;
	      }else{
	    	  objStr = value;
	      }
		  count++;
	    }
    });
	//请选择数据
	if(count==0){
		return "noData";
	}
	//只能选择一条数据
	if(count>1){
		return "dataError";
	}
	return objStr;
}

/**
 * json转标准的树格式
 * @author tanjun
 * @param rows
 * @return 树对象
 */
function convert(rows){
    var nodes = [];    
    // 得到顶层节点  
    for(var i=0; i<rows.length; i++){    
        var row = rows[i];   
        //如果父ID为""，则为顶层节点
		if(row.parentID=="" || row.parentID=="0"){
            nodes.push({
                id:row.id,   
                text:row.name,
                checked:row.checked,
                attributes:{   
                	appTypeFor:row.appTypeFor,
                	level:row.level
                }   
            });
		}
    }
    if(nodes.length==0){
    	//没有父节点时只加载子集
    	var nodes2 = [];
    	for(var i=0; i<rows.length; i++){    
             var row = rows[i];    
             nodes2.push({
                 id:row.id,   
                 text:row.name,
                 checked:row.checked,
                 attributes:{   
                	appTypeFor:row.appTypeFor,
                 	level:row.level
                 }   
             });
         }  
    	 return nodes2;
    }
    var toDo = []; 
    for(var i=0; i<nodes.length; i++){    
        toDo.push(nodes[i]);    
    }    
    while(toDo.length){    
    	// 父节点
        var node = toDo.shift();   
        // 得到子节点   
        for(var i=0; i<rows.length; i++){    
            var row = rows[i];    
            if (row.parentID == node.id){    
                var child = {id:row.id,text:row.name,checked:row.checked,attributes:{appTypeFor:row.appTypeFor,level:row.level}};    
                if (node.children){    
                    node.children.push(child);    
                } else {    
                    node.children = [child];    
                }    
                toDo.push(child);    
            }    
        }    
    }    
    return nodes;    
}

//禁用按键
function keyDown(){
	var k = window.event.keyCode;
	//禁用回退键
	if (8 == k) {
		window.event.keyCode=0;
		window.event.returnValue=false;
		return false;
	}
}

//自动生成年份
function createYear(startY){
	
	
}

//更新当前tab页  url:页面url,title:tab显示名称，iconCls：图标，如果没有就传null
function updateCurTab(url,title){
	//创建页面隐藏元素，存原始title
	var iframe = '<iframe src="' + url + '" frameborder="0" style="border:0;width:100%;height:99%;"></iframe>';
	var t = $('#my_tabs');
	var tab = t.tabs('getSelected'); // 获取选择的面板
	//更新页面内容
	t.tabs('update', {
		tab:tab,
		options: {
			title:title,
			content: iframe
		}
	});
}

//新增tab页
function addTab(params) {
	var iframe = '<iframe src="' + params.url + '" frameborder="0" style="border:0;width:100%;height:99%;"></iframe>';
	var t = $('#my_tabs');
	if (t.tabs('exists', params.title)) {
		t.tabs('select', params.title);
		var tab = t.tabs('getSelected');  // 获取选择的面板
		//刷新页面
		t.tabs('update', {
			tab:tab,
			options: {
				content: iframe
			}
		});
	} else {
		t.tabs('add', {
			title: params.title,
			closable: true,
			content: iframe,
			border: false,
			iconCls:params.iconCls
		});
	}
}

//打开tab页：url:页面url,title:tab显示名称，iconCls：图标，如果没有就传null
function openTab(url,title){
	addTab({
		url : url,
		title : title,
		iconCls : null
	});
}

//文本字段截取显示title
function formaterLongText(value,row,index){
	var remark;
	if(value!=undefined){
		remark=value;
		if(value.length>50){
			remark=value.substring(0,50);
		}
		return "<span title=\""+value+"\">"+remark+"</span>";
	}
}

jQuery.download = function(url, data, method){
	// 获得url和data
    if( url && data ){
        // data 是 string或者 array/object
        data = typeof data == 'string' ? data : jQuery.param(data);
        // 把参数组装成 form的  input
        var inputs = '';
        jQuery.each(data.split('&'), function(){
            var pair = this.split('=');
            inputs+='<input type="hidden" name="'+ pair[0] +'" value="'+ pair[1] +'" />';
        });
        // request发送请求
        jQuery('<form action="'+ url +'" method="'+ (method || 'post') +'">'+inputs+'</form>')
        	.appendTo('body').submit().remove();
    };
};

function fixRownumber(){
$.extend($.fn.datagrid.methods, {  
    fixRownumber : function (jq) {  
        return jq.each(function () {  
            var panel = $(this).datagrid("getPanel");  
            var clone = $(".datagrid-cell-rownumber", panel).last().clone();  
            clone.css({  
                "position" : "absolute",  
                left : -1000  
            }).appendTo("body");  
            var width = clone.width("auto").width();  
            if (width > 25) {  
                //多加5个像素,保持一点边距  
                $(".datagrid-header-rownumber,.datagrid-cell-rownumber", panel).width(width + 5);  
                $(this).datagrid("resize");  
                //一些清理工作  
                clone.remove();  
                clone = null;  
            } else {  
                //还原成默认状态  
                $(".datagrid-header-rownumber,.datagrid-cell-rownumber", panel).removeAttr("style");  
            }  
        });  
    }  
});  }

jQuery.extend({
	//HTTP get方法
	get: function (url, data, callback, type) {
		// shift arguments if data argument was ommited
		if (jQuery.isFunction(data)) {
			callback = data;
			data = null;
		}
		return jQuery.ajax({
			type: "GET",
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	},
	//HTTP　POST方法
	post: function (url, data, callback, type) {

		if (jQuery.isFunction(data)) {
			callback = data;
			data = {};
		}
		return jQuery.ajax({
			type: "POST",
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	},
	//获得JSON数据
	getJSON: function (url, data, callback) {
		return jQuery.get(url, data, callback, "json");
	},
	//设置全局 AJAX 默认选项。
	ajaxSetup: function (settings) {
		jQuery.extend(jQuery.ajaxSettings, settings);
	},
	ajaxSettings: {
		url: location.href,
		type: "POST",
		timeout: 0,
		contentType: "application/x-www-form-urlencoded",
		processData: true,
		async: true,
		data: null,
		username: null,
		password: null,
		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			json: "application/json, text/javascript,text/ajax",
			text: "text/plain",
			_default: "*/*"
		}
	},
	//为下一次请求缓存Last-Modified头部.
	lastModified: {},

	ajax: function (s) {
		//两次继承s
		s = jQuery.extend(true, s, jQuery.extend(true, {}, jQuery.ajaxSettings, s));
		var status, data, type = s.type.toUpperCase();

		//我把jsonp和script取消了，可惜了 可以直接在页面上插入script来完成跨域

		// If data is available, append data to url for get requests
		if (s.data && type == "GET") {
			s.url += (s.url.match(/\?/) ? "&" : "?") + s.data;
			// IE likes to send both get and post data, prevent this
			s.data = null;
		}

		var requestDone = false;

		//比较简单的创建请求对象;微软在IE7上并没有正确地实现XMLHttpRequest
		var xhr = window.ActiveXObject ? new ActiveXObject("Microsoft.XMLHTTP") : new XMLHttpRequest();

		// Open the socket
		// 只是说open用于初始化一个准备发起仍在'pending'状态中的请求
		if (s.username)
			xhr.open(type, s.url, s.async, s.username, s.password);
		else
			xhr.open(type, s.url, s.async);

		// Need an extra try/catch for cross domain requests in Firefox 3
		try {

			//// 如果需要一个过期头, 那就设置这个过期头.过期头所标识的日期一般用于浏览器的缓存设置. 
			if (s.ifModified)
				xhr.setRequestHeader("If-Modified-Since",
					jQuery.lastModified[s.url] || "Thu, 01 Jan 1970 00:00:00 GMT");

			// 设置头部,以便能使服务器知道这是一个通过XMLHttpRequest发送的请求.
			xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");

			//设置接收数据的类型
			xhr.setRequestHeader("Accept", s.dataType && s.accepts[s.dataType] ?
				s.accepts[s.dataType] + ", */*" :
				s.accepts._default);
		} catch (e) {}

		//等待返回的请求
		var onreadystatechange = function (isTimeout) {
			// The transfer is complete and the data is available, or the request timed out
			if (!requestDone && xhr && (xhr.readyState == 4 || isTimeout == "timeout")) {
				requestDone = true;

				// clear poll interval
				if (ival) {
					clearInterval(ival);
					ival = null;
				}
				status = isTimeout == "timeout" && "timeout" || !jQuery.httpSuccess(xhr) && "error" || s.ifModified && jQuery.httpNotModified(xhr, s.url) && "notmodified" || "success";
				if (status == "success") {
					// Watch for, and catch, XML document parse errors
					try {
						// process the data (runs the xml through httpData regardless of callback)
						data = jQuery.httpData(xhr, s.dataType, s.dataFilter);
					} catch (e) {
						status = "parsererror";
					}
				}

				//如果设置了ifModified为true,对响应头进行缓存
				//下次请求相同url的时候可以看看请求的页面的修改日期是否晚过这个日期 
				if (status == "success") {
					// Cache Last-Modified header, if ifModified mode.
					var modRes;
					try {
						modRes = xhr.getResponseHeader("Last-Modified");
					} catch (e) {} // swallow exception thrown by FF if header is not available

					if (s.ifModified && modRes)
						jQuery.lastModified[s.url] = modRes;
					success();
				} else
					jQuery.handleError(s, xhr, status);


				// 触发complete事件, 运行绑定在这个事件上事件监听函数
				complete();

				// 把xhr设为null, 让垃圾回收器对xhr进行回收,防止内存泄漏
				if (s.async)
					xhr = null;
			}
		};
		//如果是异步的请求, 设置请求重试, 一次不成功就再来直到成功或者超时
		if (s.async) {
			// don't attach the handler to the request, just poll it instead
			var ival = setInterval(onreadystatechange, 13);

			// Timeout checker
			if (s.timeout > 0)
				setTimeout(function () {
					// 如果xhr不为null, 说明请求正在进行,取消这次请求, 因为超时了
					if (xhr) {
						// Cancel the request
						xhr.abort();
						//如果请求还没完成,马上调用函数这样requestDone为true
						if (!requestDone)
							onreadystatechange("timeout");
					}
				}, s.timeout);
		}

		//发送请求
		try {
			xhr.send(s.data);
		} catch (e) {
			jQuery.handleError(s, xhr, null, e);
		}

		//在firefox 1.5中,同步请求并不能触发statechange事件.所以手动触发
		if (!s.async)
			onreadystatechange();
		function success() {
			// If a local callback was specified, fire it and pass it the data
			if (s.success)
				s.success(data, status);
		}

		function complete() {
			// Process result
			if (s.complete)
				s.complete(xhr, status);
		}
		// return XMLHttpRequest to allow aborting the request etc.
		return xhr;
	},
	handleRequest: function(s, xhr, request) {
		alert("handleRequest");
		//xhr.setRequestHeader("Request-Type", "ajax");
    },
	//jQuery.ajax方法中出现的错误处理函数
	handleError: function (s, xhr, status, e) {
		// If a local callback was specified, fire it
		if (s.error){
			s.error(xhr, status, e)
		}
		errorMessage("系统服务异常 <br/> <br/>错误码:"+xhr.status+status);
		console.log(s);
		console.log(xhr);
		console.log(status);
		console.log(e);
	},
	//判断当前这个请求是否是成功
	httpSuccess: function (xhr) {
		try {
			// IE有一个错误, 那就是有时候应该返回204(No Content)但是它却返回1223
			//safari在文档没有修改时(304)得到的status会等于undefined,所以把这种情况也当作是成功
			return !xhr.status && location.protocol == "file:" ||
				(xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || xhr.status == 1223 ||
				jQuery.browser.webkit && xhr.status == undefined;
		} catch (e) {}
		return false;
	},
	//判断请求回来的服务器响应是不是"NotModified".
	httpNotModified: function (xhr, url) {
		try {
			var xhrRes = xhr.getResponseHeader("Last-Modified");
			//Firefox 总是返回200. 还是对比一下Last-Modified的日期稳妥一些.
			return xhr.status == 304 || xhrRes == jQuery.lastModified[url] ||
				jQuery.browser.webkit && xhr.status == undefined;
		} catch (e) {}
		return false;
	},
	/*获取XMLHTTPRequest的响应数据.允许对数据使用自定义的函数进行预处理.并根据用户提供的数据类型对响应数据做不同的处理. 最后将数据返回.*/
	httpData: function (xhr, type, filter) {
		var ct = xhr.getResponseHeader("content-type"),
			xml = type == "xml" || !type && ct && ct.indexOf("xml") >= 0,
			data = xml ? xhr.responseXML : xhr.responseText;
		if (xml && data.documentElement.tagName == "parsererror")
			throw "parsererror";
		// Get the JavaScript object, if JSON is used.
		if (type == "json"){
			data = eval("(" + data + ")")
			if(data.code != 10000
					&& data.success == false){
				warningMessage(data.msg);
				if(data.code == 30000){
					setTimeout("window.top.location.href='/sys/loginOut'", 3000);
				}
			}
		}
		return data;
	}
});
