package cn.gdeng.nst.server.member.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import cn.gdeng.nst.api.dto.member.MemberCarApiDTO;
import cn.gdeng.nst.api.server.member.MemberCarApiService;
import cn.gdeng.nst.api.vo.member.MemberCarDetailVo;
import cn.gdeng.nst.api.vo.member.MemberCarPageVo;
import cn.gdeng.nst.dao.BaseDao;
import cn.gdeng.nst.entity.nst.MemberCarEntity;
import cn.gdeng.nst.enums.MsgCons;
import cn.gdeng.nst.util.web.api.ApiPage;
import cn.gdeng.nst.util.web.api.ApiResult;
import cn.gdeng.nst.util.web.api.BizException;

import com.alibaba.dubbo.config.annotation.Service;
import com.gudeng.framework.dba.transaction.annotation.Transactional;

@Service
public class MemberCarApiServiceImpl implements MemberCarApiService{
    
    @Resource
    private BaseDao<?> baseDao;

	@Override
	public ApiResult<ApiPage> queryPage(ApiPage page) throws BizException {
		ApiResult<ApiPage> apiResult=new ApiResult<>();
		List<MemberCarPageVo> pageVoList=new ArrayList<MemberCarPageVo>();
		int total=baseDao.queryForObject("MemberCarApi.getTotal",page.getParaMap(), Integer.class);
		if(total==0){
			page.setRecordList(pageVoList).setRecordCount(total);
			apiResult.setResult(page);
			return apiResult;
		}
		pageVoList=baseDao.queryForList("MemberCarApi.queryPage", page.getParaMap(),MemberCarPageVo.class);
		page.setRecordList(pageVoList).setRecordCount(total);
		apiResult.setResult(page);
		return apiResult;
	}
	/**
     * 删除车辆（逻辑删除）
     * @param  id
     * @return 影响条数
     */
	@Override
    @Transactional
	public ApiResult<Integer> deleteMemberCarById(MemberCarApiDTO memberCarApiDTO) throws BizException {
		if(null==memberCarApiDTO.getId()){
			throw new BizException(MsgCons.C_20001, MsgCons.M_20001);
		}
		int Cartotal=baseDao.queryForObject("MemberCarApi.getTotal",memberCarApiDTO, Integer.class);
		int Linetotal=baseDao.queryForObject("MemberLineApi.getTotal",memberCarApiDTO, Integer.class);
		if(Linetotal>0&&Cartotal==1){
			throw new BizException(MsgCons.C_22025, MsgCons.M_22025);
		}
		int re=baseDao.execute("MemberCarApi.deleteMemberCarById",memberCarApiDTO);
		ApiResult<Integer> apiResult = null;
		if(re>0){
			apiResult=	new ApiResult<Integer>(re,MsgCons.C_10000,MsgCons.M_10000);
		}else{
			apiResult=	new ApiResult<Integer>(re,MsgCons.C_20000,MsgCons.M_20000);
		}
	     return apiResult;
	}

	@Override
	@Transactional
	public ApiResult<Long> saveMemberCar(MemberCarEntity memberCarEntity)
			throws BizException {
		 Map<String, Object> map=new HashMap<String, Object>();
		if(null==memberCarEntity.getMemberId()){
			throw new BizException(MsgCons.C_20001, MsgCons.M_20001);
		}
		if(null==memberCarEntity.getCarLength()){
			throw new BizException(MsgCons.C_24015, MsgCons.M_24015);
		}
		if(null==memberCarEntity.getCarType()){
			throw new BizException(MsgCons.C_24016, MsgCons.M_24016);
		}
		if(null==memberCarEntity.getLoad()){
			throw new BizException(MsgCons.C_24019, MsgCons.M_24019);
		}
		if(null==memberCarEntity.getCarHeadUrl()&&null==memberCarEntity.getCarRearUrl()&&null==memberCarEntity.getVehicleUrl()){
			throw new BizException(MsgCons.C_26004, MsgCons.M_26004);
		}
		int total= baseDao.queryForObject("MemberCarApi.queryMemberCarNumber", memberCarEntity, Integer.class);     
       if(total>0){
    	   throw new BizException(MsgCons.C_22026, MsgCons.M_22026);
       }
		long re=baseDao.persist(memberCarEntity, Long.class);
		ApiResult<Long> apiResult = null;
		if(re>0){
			apiResult=	new ApiResult<Long>(re,MsgCons.C_10000,MsgCons.M_10000);
		}else{
			apiResult=	new ApiResult<Long>(re,MsgCons.C_20000,MsgCons.M_20000);
		}
		  return apiResult;
	}

	@Override
	public ApiResult<MemberCarDetailVo> queryMemberCarDetailById(
			MemberCarApiDTO memberCarApiDTO) throws BizException {
		if(null==memberCarApiDTO.getMemberId()){
			throw new BizException(MsgCons.C_20001, MsgCons.M_20001);
		}
		MemberCarDetailVo vo = baseDao.queryForObject("MemberCarApi.findMemberCarById", memberCarApiDTO, MemberCarDetailVo.class);     
	        ApiResult<MemberCarDetailVo> apiResult = new ApiResult<MemberCarDetailVo>(vo,MsgCons.C_10000,MsgCons.M_10000);
	        return apiResult;
	}
	
	@Override
	public ApiResult<Integer> queryMemberCarNumberNumber(
			MemberCarApiDTO memberCarApiDTO) throws BizException {
		if(null==memberCarApiDTO.getCarNumber()){
			throw new BizException(MsgCons.C_20001, MsgCons.M_20001);
		}
		int total= baseDao.queryForObject("MemberCarApi.queryMemberCarNumberNumber", memberCarApiDTO, Integer.class);     
	        ApiResult<Integer> apiResult = new ApiResult<Integer>(total,MsgCons.C_10000,MsgCons.M_10000);
	        return apiResult;
	}
	
	@Override
	public ApiResult<Integer> updateMemberCar(MemberCarApiDTO memberCarApiDTO)
			throws BizException {
		if(null==memberCarApiDTO.getId()){
			throw new BizException(MsgCons.C_20001, MsgCons.M_20001);
		}
		if(null==memberCarApiDTO.getMemberId()){
			throw new BizException(MsgCons.C_20001, MsgCons.M_20001);
		}
		int re=baseDao.execute("MemberCarApi.updateMemberCarById",memberCarApiDTO);
		ApiResult<Integer> apiResult = null;
		if(re>0){
			apiResult=	new ApiResult<Integer>(re,MsgCons.C_10000,MsgCons.M_10000);
		}else{
			apiResult=	new ApiResult<Integer>(re,MsgCons.C_20000,MsgCons.M_20000);
		}
		  return apiResult;
	}


}
