package cn.gdeng.nst.admin.controller.admin;

import java.io.IOException;
import java.io.OutputStream;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.gdeng.nst.admin.controller.right.AdminBaseController;
import cn.gdeng.nst.admin.dto.admin.AdminOrderBeforeDTO;
import cn.gdeng.nst.admin.dto.admin.AdminPageDTO;
import cn.gdeng.nst.admin.service.admin.OrderBeforeService;
import cn.gdeng.nst.enums.MsgCons;
import cn.gdeng.nst.util.admin.web.CommonUtil;
import cn.gdeng.nst.util.admin.web.DateUtil;
import cn.gdeng.nst.util.web.api.ApiResult;

import com.alibaba.dubbo.config.annotation.Reference;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;

/**
 * 接单记录
 * @author dengjianfeng
 *
 */
@Controller
@RequestMapping("orderBefore")
public class OrderBeforeController extends AdminBaseController{

	@Reference
	private OrderBeforeService orderBeforeService;
	
	@RequestMapping("index")
	public String index(){
		return "orderBefore/list";
	}
	
	@RequestMapping("queryPage")
	@ResponseBody
	public String queryPage(HttpServletRequest request){
		Map<String, Object> paramMap = getParametersMap(request); 
		// 分页参数处理
		setCommParameters(request, paramMap);
		// 查询时间处理
		formatDateParams(request, paramMap);
	
		ApiResult<AdminPageDTO> apiResult = orderBeforeService.queryPage(paramMap);
		if(apiResult != null){
			return JSONObject.toJSONString(apiResult.getResult(), SerializerFeature.WriteDateUseDateFormat);
		}
		return null;
	}
	
	@RequestMapping(value="exportCheck",produces="application/json;charset=utf-8")
	@ResponseBody
	public String exportCheck(HttpServletRequest request){
		Map<String, Object> paramMap = getParametersMap(request);
		// 查询时间处理
		formatDateParams(request, paramMap);
		
		ApiResult<Integer> apiResult = orderBeforeService.countTotal(paramMap);
		if(apiResult != null && apiResult.getResult() != null){
			int total = apiResult.getResult();
			if(total <= 0){
				return JSONObject.toJSONString(new ApiResult<String>().withError(MsgCons.C_29005, MsgCons.M_29005));
			}
			else if(total > EXPORT_MAX_SIZE){
				return JSONObject.toJSONString(new ApiResult<String>().withError(MsgCons.C_29006, MsgCons.M_29006));
			}
		}
		return JSONObject.toJSONString(new ApiResult<String>());
	}
	
	@RequestMapping("export")
	public void export(HttpServletRequest request, HttpServletResponse response){
		//查询参数
		Map<String, Object> paramMap = getParametersMap(request);
		// 查询时间处理
		formatDateParams(request, paramMap);	
		paramMap.put("pageSize", EXPORT_PAGE_SIZE);
		
		OutputStream ouputStream = null;
		try{
			String fileName = "接单列表"+DateUtil.toString(new Date(), "yyyy-MM-dd_HH:mm:ss");
            response.setContentType("application/vnd.ms-excel");
            response.setHeader("Content-disposition", "attachment;filename=" + new String(fileName.getBytes(), "ISO-8859-1") + ".xlsx");
            ouputStream = response.getOutputStream();
            
			SXSSFWorkbook workbook = new SXSSFWorkbook();
			String[] headers = {"发布人姓名","发布人手机号码","发布人注册来源", "发货地", "目的地", "线路类型", "重量", "发布时间",
	            		"接单时间", "司机姓名", "司机手机号码", "确认时间", "确认状态"};
            
            int sheetNum = 1;
			Sheet sheet = createSheet(workbook, sheetNum, headers);
            
			// 查询导出数据总数
			ApiResult<Integer> countApiResult = orderBeforeService.countTotal(paramMap);
            int totalCount = 0;
            if(countApiResult != null){
            	totalCount = countApiResult.getResult();
            }
            // 计算分几次查询导出数据
            int exportCount = (totalCount / EXPORT_PAGE_SIZE) + 1;
            
            int rowNum = 1; //当前sheet写入行数
            Integer id = null; //当前分页数据的最后一条数据id
            for(int i = 0; i < exportCount; i++){
            	// 查询分页数据
            	paramMap.put("id", id);
            	ApiResult<List<AdminOrderBeforeDTO>> apiResult = orderBeforeService.queryListForExport(paramMap);
            	List<AdminOrderBeforeDTO> list = null;
            	if(apiResult != null){
	    			list = apiResult.getResult();
	    		}
	   
	            if(CollectionUtils.isEmpty(list)){
	            	break;
	            }
	            for(int j = 0, len = list.size(); j < len; j++){
                   	// 数据已经达到单个sheet的最大行数，新建sheet
                   	if(rowNum % SHEET_MAX_ROW_NUM == 0){
                   		sheetNum++;
                   		sheet = createSheet(workbook, sheetNum, headers);
                   		rowNum = 1; //重置rowNum
                   	}
                   	
                   	AdminOrderBeforeDTO dto = list.get(j);
                   	writeRowData(sheet, rowNum, dto);
                    rowNum++;
                    
                    // 记录最后一条数据id
                    if(j == (len - 1)){
                    	id = dto.getId();
                    }
	            }
            }
            workbook.write(ouputStream);
		}catch(Exception e){
			e.printStackTrace();
		}finally {
            try {
               ouputStream.flush();
               ouputStream.close();
            } catch (IOException e) {
               e.printStackTrace();
            }
        }
	}
	
	/**
	 * 创建一个sheet，并在第一行写入表头
	 * @param workbook
	 * @param sheetNum
	 * @param headers
	 * @return
	 */
	private Sheet createSheet(SXSSFWorkbook workbook, int sheetNum, String[] headers){
		String sheetName = "接单记录统计数据";
		if(sheetNum > 1){
			sheetName += sheetNum;
		}
		Sheet sheet = workbook.createSheet(sheetName);
		Row row = sheet.createRow(0);
        for(int i = 0, len = headers.length; i < len; i++){
        	row.createCell(i).setCellValue(headers[i]);
        }
        return sheet;
	}
	
	private void writeRowData(Sheet sheet, int rowNum, AdminOrderBeforeDTO dto){
		Row row = sheet.createRow(rowNum);
		
		String totalWeightStr = null;
		if(dto.getTotalWeight() != null){
			totalWeightStr = dto.getTotalWeight() + "吨";
		}else{
			totalWeightStr = "";
		}
		
		String releaseTimeStr = null;
		if(dto.getReleaseTime() != null){
			releaseTimeStr = DateUtil.toString(dto.getReleaseTime(), "yyyy-MM-dd HH:mm:ss");
		}else{
			releaseTimeStr = "";
		}
		
		String acceptTimeStr = null;
		if(dto.getCreateTime() != null){
			acceptTimeStr =  DateUtil.toString(dto.getCreateTime(), "yyyy-MM-dd HH:mm:ss");
		}else{
			acceptTimeStr = "";
		}
		
		String confirmTimeStr = null;
		if(dto.getNstRule() != null){
			if(dto.getNstRule().intValue() == 4){
				confirmTimeStr = DateUtil.toString(dto.getOrderAgentLogisticTime(), "yyyy-MM-dd HH:mm:ss");
			}else{
				confirmTimeStr = DateUtil.toString(dto.getOrderInfoConfirmOrderTime(), "yyyy-MM-dd HH:mm:ss");
			}
		}else{
			confirmTimeStr = "";
		}
		
		row.createCell(0).setCellValue(dto.getShipperName());
		row.createCell(1).setCellValue(dto.getShipperMobile());
      	row.createCell(2).setCellValue(dto.getRegeTypeStr());
      	row.createCell(3).setCellValue(dto.getSDetailStr());
      	row.createCell(4).setCellValue(dto.getEDetailStr());
      	row.createCell(5).setCellValue(dto.getSourceTypeStr());
      	row.createCell(6).setCellValue(totalWeightStr);
      	row.createCell(7).setCellValue(releaseTimeStr);
      	row.createCell(8).setCellValue(acceptTimeStr);
      	row.createCell(9).setCellValue(dto.getDriverName());
      	row.createCell(10).setCellValue(dto.getDriverMobile());
      	row.createCell(11).setCellValue(confirmTimeStr);
      	row.createCell(12).setCellValue(dto.getSourceStatusStr());
	}
	
	/**
	 * 查询参数时间格式化：开始时间增加00:00:00， 接受时间增加23:59:59
	 * @param request
	 * @param paramMap
	 */
	private void formatDateParams(HttpServletRequest request, Map<String, Object> paramMap){
		// 发布时间
		String releaseStartDate = request.getParameter("releaseStartDate");
		String releaseEndDate = request.getParameter("releaseEndDate");
		if(StringUtils.isNotBlank(releaseStartDate)){
			paramMap.put("releaseStartTime", CommonUtil.getStartOfDay(DateUtil.formateDate(releaseStartDate)));
		}
		if(StringUtils.isNotBlank(releaseEndDate)){
			paramMap.put("releaseEndTime", CommonUtil.getEndOfDay(DateUtil.formateDate(releaseEndDate)));
		}
		// 接受时间
		String acceptStartDate = request.getParameter("acceptStartDate");
		String acceptEndDate = request.getParameter("acceptEndDate");
		if(StringUtils.isNotBlank(acceptStartDate)){
			paramMap.put("acceptStartTime", CommonUtil.getStartOfDay(DateUtil.formateDate(acceptStartDate)));
		}
		if(StringUtils.isNotBlank(acceptEndDate)){
			paramMap.put("acceptEndTime", CommonUtil.getEndOfDay(DateUtil.formateDate(acceptEndDate)));
		}
		// 确认时间
		String confirmStartDate = request.getParameter("confirmStartDate");
		String confirmEndDate = request.getParameter("confirmEndDate");
		if(StringUtils.isNotBlank(confirmStartDate)){
			paramMap.put("confirmStartTime", CommonUtil.getStartOfDay(DateUtil.formateDate(confirmStartDate)));
		}
		if(StringUtils.isNotBlank(confirmEndDate)){
			paramMap.put("confirmEndTime", CommonUtil.getEndOfDay(DateUtil.formateDate(confirmEndDate)));
		}
	}
}
